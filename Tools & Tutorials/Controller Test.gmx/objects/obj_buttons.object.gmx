<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    LB_canpress = true;
    RB_canpress = true;
    back_canpress = true;
    start_canpress = true;
    
    window_set_caption("Controller Test");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if (joystick_exists(0))                                                         // controller plugged in?
    {         
        // continuous presses - activates as long as button is held down
                          
        if (joystick_check_button(0,1))                                             // A creates snow
            effect_create_above(ef_snow,0,0,0,c_lime);
        
        if (joystick_check_button(0,2))                                             // B creates smoke                                       
            effect_create_above(ef_smokeup,320,240,2,c_red);               
        
        if (joystick_check_button(0,3))                                             // x creates rain                                       
            effect_create_above(ef_rain,0,0,2,c_blue);
            
        if (joystick_check_button(0,4))                                             // y creates cloud                                       
            effect_create_above(ef_cloud,random_range(0,640),random_range(0,480),0,c_yellow); 
            
        background_hspeed[0] = 4 * -joystick_zpos(0);                               // LT and RT control background scroll  
        
        // instantaneous presses - only triggers once per press
        
        if (joystick_check_button(0,5) &amp;&amp; LB_canpress)                              // LB creates fireworks
        {
            LB_canpress = false;                                                                          
            effect_create_above(ef_firework,random_range(0,640),random_range(0,480),1,c_fuchsia); 
        }
        
        else if (!joystick_check_button(0,5) &amp;&amp; !LB_canpress)
            LB_canpress = true;
        
        
        if (joystick_check_button(0,6) &amp;&amp; RB_canpress)                              // RB creates explosion
        {
            RB_canpress = false;                                                                     
            effect_create_above(ef_explosion,random_range(0,640),random_range(0,480),1,make_color_rgb(255,128,0)); 
        }
        
        else if (!joystick_check_button(0,6) &amp;&amp; !RB_canpress)
            RB_canpress = true;
            
        if (joystick_check_button(0,7) &amp;&amp; back_canpress)                              // Back creates rings
        {
            back_canpress = false;                                                                     
            effect_create_above(ef_ring,random_range(0,640),random_range(0,480),1,make_color_rgb(0,128,255)); 
        }
        
        else if (!joystick_check_button(0,7) &amp;&amp; !back_canpress)
            back_canpress = true;
        
        if (joystick_check_button(0,8) &amp;&amp; start_canpress)                              // Start creates stars
        {
            start_canpress = false;                                                                     
            effect_create_above(ef_star,random_range(0,640),random_range(0,480),2,make_color_rgb(128,255,0)); 
        }
        
        else if (!joystick_check_button(0,8) &amp;&amp; !start_canpress)
            start_canpress = true;
        
        
        
        switch (joystick_pov(0))                                                    // enumerate directions for D-pad
        {
            case 225: pov = "Down Left"; break;
            case 180: pov = "Down"; break;
            case 135: pov = "Down Right"; break;
            case 270: pov = "Left"; break;
            case -1: pov = "Center"; break;
            case 90: pov = "Right"; break;
            case 315: pov = "Up Left"; break;
            case 0: pov = "Up"; break;
            case 45: pov = "Up Right"; break;
        } 
        
        draw_text(4,356,"D-Pad Direction: " + pov);                                 // d-pad direction
    }
    
    else                                                                            // no
        draw_text(4,4,"Gamepad not plugged in");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if (joystick_exists(0))                                                         // controller plugged in?
    {              
        draw_set_color(c_black);                 
        draw_text(4,4,"Gamepad plugged in");                                        // yes
        draw_text(4,20,"Name: " + joystick_name(0));                                // name of controller
        draw_text(4,36,"Number of axes: " + string(joystick_axes(0)));              // total number of axes (= 5 for Xbox 360 controllers)
        draw_text(4,52,"Number of button: " + string(joystick_buttons(0)));         // total number of buttons (= 10 for Xbox 360 controllers)
        draw_text(4,68,"Has POV: " + string(joystick_has_pov(0)));                  // has POV (= the D-pad on Xbox 360 controllers)
        
        switch (joystick_direction(0))                                              // enumerate directions for left stick
        {
            case vk_numpad1: dir = "Down Left"; break;
            case vk_numpad2: dir = "Down"; break;
            case vk_numpad3: dir = "Down Right"; break;
            case vk_numpad4: dir = "Left"; break;
            case vk_numpad5: dir = "Center"; break;
            case vk_numpad6: dir = "Right"; break;
            case vk_numpad7: dir = "Up Left"; break;
            case vk_numpad8: dir = "Up"; break;
            case vk_numpad9: dir = "Up Right"; break;
        } 
        
        draw_text(4,84,"Left Stick Direction: " + dir);                             // left stick direction
        
        draw_text(4,100,"A: " + string(joystick_check_button(0,1)));                // A
        draw_text(4,116,"B: " + string(joystick_check_button(0,2)));                // B
        draw_text(4,132,"X: " + string(joystick_check_button(0,3)));                // X
        draw_text(4,148,"Y: " + string(joystick_check_button(0,4)));                // Y
        draw_text(4,164,"LB: " + string(joystick_check_button(0,5)));               // LB
        draw_text(4,180,"RB: " + string(joystick_check_button(0,6)));               // RB
        draw_text(4,196,"Back: " + string(joystick_check_button(0,7)));             // Back
        draw_text(4,212,"Start: " + string(joystick_check_button(0,8)));            // Start
        draw_text(4,228,"LS: " + string(joystick_check_button(0,9)));               // LS
        draw_text(4,244,"RS: " + string(joystick_check_button(0,10)));              // RS
        
        draw_text(4,260,"Left Stick X Tilt: " + string(joystick_xpos(0)));          // left stick tilt
        draw_text(4,276,"Left Stick Y Tilt: " + string(joystick_ypos(0)));
        draw_text(4,292,"Right Stick X Tilt: " + string(joystick_upos(0)));         // right stick tilt
        draw_text(4,308,"Right Stick Y Tilt: " + string(joystick_rpos(0)));
        draw_text(4,324,"LT/RT: " + string(joystick_zpos(0)));                      // LT and RT (both triggers are on the same axis: LT is positive, RT is negative)
        
        switch (joystick_pov(0))                                                    // enumerate directions for D-pad
        {
            case 225: pov = "Down Left"; break;
            case 180: pov = "Down"; break;
            case 135: pov = "Down Right"; break;
            case 270: pov = "Left"; break;
            case -1: pov = "Center"; break;
            case 90: pov = "Right"; break;
            case 315: pov = "Up Left"; break;
            case 0: pov = "Up"; break;
            case 45: pov = "Up Right"; break;
        } 
        
        draw_text(4,356,"D-Pad Direction: " + pov);                                 // d-pad direction
    }
    
    else                                                                            // no
        draw_text(4,4,"Gamepad not plugged in");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
